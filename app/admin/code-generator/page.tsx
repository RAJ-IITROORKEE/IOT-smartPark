'use client';

import { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Download, Copy, Wifi, Zap } from 'lucide-react';

interface SensorConfig {
  id: number;
  trigPin: number;
  echoPin: number;
  slotName: string;
}

interface NetworkConfig {
  ssid: string;
  password: string;
  serverIP: string;
}

export default function CodeGeneratorPage() {
  const [sensors, setSensors] = useState<SensorConfig[]>([
    { id: 1, trigPin: 4, echoPin: 2, slotName: 'Slot A1' },
    { id: 2, trigPin: 19, echoPin: 21, slotName: 'Slot A2' },
    { id: 3, trigPin: 12, echoPin: 14, slotName: 'Slot A3' },
  ]);
  
  const [networkConfig, setNetworkConfig] = useState<NetworkConfig>({
    ssid: 'Your_WiFi_Name',
    password: 'Your_WiFi_Password',
    serverIP: '192.168.1.100' // Will be auto-detected
  });

  const [generatedCode, setGeneratedCode] = useState<string>('');

  // Auto-detect server IP from current network
  useEffect(() => {
    if (typeof window !== 'undefined') {
      const currentHost = window.location.hostname;
      if (currentHost !== 'localhost') {
        setNetworkConfig(prev => ({ ...prev, serverIP: currentHost }));
      }
    }
  }, []);

  const addSensor = () => {
    const newId = Math.max(...sensors.map(s => s.id)) + 1;
    setSensors([...sensors, {
      id: newId,
      trigPin: 0,
      echoPin: 0,
      slotName: `Slot ${String.fromCharCode(65 + Math.floor((newId - 1) / 26))}${((newId - 1) % 26) + 1}`
    }]);
  };

  const removeSensor = (id: number) => {
    setSensors(sensors.filter(s => s.id !== id));
  };

  const updateSensor = (id: number, field: keyof SensorConfig, value: string | number) => {
    setSensors(sensors.map(s => 
      s.id === id ? { ...s, [field]: value } : s
    ));
  };

  const generateArduinoCode = () => {
    const code = `#include <WiFi.h>
#include <HTTPClient.h>

// ==== WiFi credentials ====
const char* ssid     = "${networkConfig.ssid}";
const char* password = "${networkConfig.password}";

// ==== Your PC/Laptop IP where Next.js is running ====
String serverURL = "http://${networkConfig.serverIP}:3000/api/update";

// ==== LED pins ====
const int led1 = 5;   // GPIO5 - General status LED
const int led2 = 18;  // GPIO18 - Alert LED

// ==== Sound speed in cm/us ====
#define SOUND_SPEED 0.034

// ==== Sensor configuration ====
struct Sensor {
  int trig;
  int echo;
  String name;
};

Sensor sensors[] = {${sensors.map(sensor => `
  {${sensor.trigPin}, ${sensor.echoPin}, "${sensor.slotName}"}`).join(',')}
};

const int NUM_SENSORS = ${sensors.length};

// ==== Function to read distance ====
float getDistance(int trigPin, int echoPin) {
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);

  long duration = pulseIn(echoPin, HIGH, 25000); // timeout = 25ms
  if (duration == 0) return -1; // no response
  return (duration * SOUND_SPEED / 2.0);
}

void setup() {
  Serial.begin(115200);
  
  Serial.println("=== SmartPark ESP32 Starting ===");
  Serial.println("Generated by SmartPark Admin Panel");
  Serial.println("Sensors configured: " + String(NUM_SENSORS));

  // Setup pins for each sensor
  for (int i = 0; i < NUM_SENSORS; i++) {
    pinMode(sensors[i].trig, OUTPUT);
    pinMode(sensors[i].echo, INPUT);
    Serial.println("Sensor " + String(i+1) + " (" + sensors[i].name + "): Trig=" + String(sensors[i].trig) + ", Echo=" + String(sensors[i].echo));
  }

  // Setup LEDs
  pinMode(led1, OUTPUT);
  pinMode(led2, OUTPUT);
  
  // LED test sequence
  digitalWrite(led1, HIGH);
  digitalWrite(led2, HIGH);
  delay(500);
  digitalWrite(led1, LOW);
  digitalWrite(led2, LOW);

  // Connect WiFi
  WiFi.begin(ssid, password);
  Serial.print("Connecting to WiFi: " + String(ssid));
  
  int attempts = 0;
  while (WiFi.status() != WL_CONNECTED && attempts < 20) {
    delay(500);
    Serial.print(".");
    attempts++;
  }
  
  if (WiFi.status() == WL_CONNECTED) {
    Serial.println("\\nWiFi Connected!");
    Serial.print("ESP32 IP: ");
    Serial.println(WiFi.localIP());
    Serial.println("Server URL: " + serverURL);
    
    // Success indication
    for(int i = 0; i < 3; i++) {
      digitalWrite(led1, HIGH);
      delay(200);
      digitalWrite(led1, LOW);
      delay(200);
    }
  } else {
    Serial.println("\\nWiFi Connection Failed!");
    // Error indication
    digitalWrite(led2, HIGH);
  }
}

void loop() {
  if (WiFi.status() == WL_CONNECTED) {
    String payload = "{\\"distances\\":[";

    // Read all sensors
    for (int i = 0; i < NUM_SENSORS; i++) {
      float d = getDistance(sensors[i].trig, sensors[i].echo);
      if (i > 0) payload += ",";

      if (d < 0) {
        payload += "null";
        Serial.println(sensors[i].name + " -> SENSOR ERROR");
      } else {
        payload += String(d, 2);
        String status = d < 10 ? "OCCUPIED" : "FREE";
        Serial.println(sensors[i].name + " -> " + String(d) + "cm (" + status + ")");
      }
    }

    payload += "]}";

    // Send data to server
    HTTPClient http;
    http.begin(serverURL);
    http.addHeader("Content-Type", "application/json");
    
    Serial.println("Sending: " + payload);
    int httpResponseCode = http.POST(payload);

    if (httpResponseCode > 0) {
      String response = http.getString();
      Serial.println("Server Response: " + response);

      // Control LEDs based on server response
      if (response.indexOf("\\"led1\\":1") > 0) {
        digitalWrite(led1, HIGH);
      } else {
        digitalWrite(led1, LOW);
      }

      if (response.indexOf("\\"led2\\":1") > 0) {
        digitalWrite(led2, HIGH);
      } else {
        digitalWrite(led2, LOW);
      }
    } else {
      Serial.println("HTTP Error: " + String(httpResponseCode));
      // Brief error indication
      digitalWrite(led2, HIGH);
      delay(100);
      digitalWrite(led2, LOW);
    }

    http.end();
  } else {
    Serial.println("WiFi Disconnected! Attempting reconnection...");
    WiFi.begin(ssid, password);
    digitalWrite(led2, HIGH); // Error LED on
  }

  Serial.println("---");
  delay(2000); // Update every 2 seconds
}`;

    setGeneratedCode(code);
  };

  const copyToClipboard = async () => {
    try {
      await navigator.clipboard.writeText(generatedCode);
      alert('Code copied to clipboard!');
    } catch (err) {
      console.error('Failed to copy: ', err);
    }
  };

  const downloadFile = () => {
    const element = document.createElement('a');
    const file = new Blob([generatedCode], { type: 'text/plain' });
    element.href = URL.createObjectURL(file);
    element.download = `smartpark_esp32_${Date.now()}.ino`;
    document.body.appendChild(element);
    element.click();
    document.body.removeChild(element);
  };

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <h1 className="text-3xl font-bold">ESP32 Code Generator</h1>
        <div className="flex gap-2">
          <Button onClick={generateArduinoCode} className="flex items-center gap-2">
            <Zap className="h-4 w-4" />
            Generate Code
          </Button>
        </div>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* Network Configuration */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Wifi className="h-5 w-5" />
              Network Configuration
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <Label htmlFor="ssid">WiFi SSID</Label>
              <Input
                id="ssid"
                value={networkConfig.ssid}
                onChange={(e) => setNetworkConfig({ ...networkConfig, ssid: e.target.value })}
                placeholder="Your WiFi network name"
              />
            </div>
            <div>
              <Label htmlFor="password">WiFi Password</Label>
              <Input
                id="password"
                type="password"
                value={networkConfig.password}
                onChange={(e) => setNetworkConfig({ ...networkConfig, password: e.target.value })}
                placeholder="Your WiFi password"
              />
            </div>
            <div>
              <Label htmlFor="serverip">Server IP Address</Label>
              <Input
                id="serverip"
                value={networkConfig.serverIP}
                onChange={(e) => setNetworkConfig({ ...networkConfig, serverIP: e.target.value })}
                placeholder="192.168.1.100"
              />
              <p className="text-sm text-gray-500 mt-1">
                Current server: {typeof window !== 'undefined' ? window.location.host : 'localhost:3000'}
              </p>
            </div>
          </CardContent>
        </Card>

        {/* Sensor Configuration */}
        <Card>
          <CardHeader>
            <CardTitle>Sensor Configuration</CardTitle>
            <Button onClick={addSensor} size="sm">Add Sensor</Button>
          </CardHeader>
          <CardContent className="space-y-4">
            {sensors.map((sensor) => (
              <div key={sensor.id} className="border rounded p-3 space-y-2">
                <div className="flex justify-between items-center">
                  <Label className="font-medium">Sensor {sensor.id}</Label>
                  {sensors.length > 1 && (
                    <Button 
                      onClick={() => removeSensor(sensor.id)} 
                      variant="destructive" 
                      size="sm"
                    >
                      Remove
                    </Button>
                  )}
                </div>
                <div className="grid grid-cols-3 gap-2">
                  <div>
                    <Label>Slot Name</Label>
                    <Input
                      value={sensor.slotName}
                      onChange={(e) => updateSensor(sensor.id, 'slotName', e.target.value)}
                      placeholder="Slot A1"
                    />
                  </div>
                  <div>
                    <Label>Trig Pin</Label>
                    <Input
                      type="number"
                      value={sensor.trigPin}
                      onChange={(e) => updateSensor(sensor.id, 'trigPin', parseInt(e.target.value))}
                    />
                  </div>
                  <div>
                    <Label>Echo Pin</Label>
                    <Input
                      type="number"
                      value={sensor.echoPin}
                      onChange={(e) => updateSensor(sensor.id, 'echoPin', parseInt(e.target.value))}
                    />
                  </div>
                </div>
              </div>
            ))}
          </CardContent>
        </Card>
      </div>

      {/* Generated Code Display */}
      {generatedCode && (
        <Card>
          <CardHeader>
            <CardTitle>Generated ESP32 Code</CardTitle>
            <div className="flex gap-2">
              <Button onClick={copyToClipboard} variant="outline" className="flex items-center gap-2">
                <Copy className="h-4 w-4" />
                Copy Code
              </Button>
              <Button onClick={downloadFile} variant="outline" className="flex items-center gap-2">
                <Download className="h-4 w-4" />
                Download .ino
              </Button>
            </div>
          </CardHeader>
          <CardContent>
            <Textarea
              value={generatedCode}
              readOnly
              className="font-mono text-sm h-96"
            />
          </CardContent>
        </Card>
      )}
    </div>
  );
}